<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>Go by Example: Variables</title>
  <link rel=stylesheet href="site.css">
</head>
<script>
  onkeydown = (e) => {

    if (e.key == "ArrowLeft") {
      window.location.href = 'values';
    }


    if (e.key == "ArrowRight") {
      window.location.href = 'constants';
    }

  }
</script>

<body>
  <div class="example" id="variables">
    <h2><a href="./">Go by Example</a>: Variables</h2>

    <table>

      <tr>
        <td class="docs">
          <p>En Go, las <em>variables</em> son declaradas y utilizadas explícitamente por
            el compilador para, por ejemplo: Verificar la corrección de tipo en las llamadas a funciones.</p>
        </td>
        <td class="code empty leading">


        </td>
      </tr>

      <tr>
        <td class="docs">

        </td>
        <td class="code leading">
          <a href="https://go.dev/play/p/N5rWndIliJW"><img title="Run code" src="play.png" class="run" /></a><img
            title="Copy code" src="clipboard.png" class="copy" />
          <pre
            class="chroma"><code><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">

        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">

        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">
          <p><code>var</code> declara 1 o más variables.</p>
        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="s">&#34;initial&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">

          <p>Puedes declarar varias variables a la vez.</p>
        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">

          <p>Go inferirá el tipo de variables inicializadas.</p>
        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">d</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">


          <p>Variables declaradas sin su correspondiente
            inicialización tendrá <em>valor cero</em>.
            Por ejemplo, el valor cero para un <code>int</code> es <code>0</code>.</p>


        </td>



        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">e</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">
          <p>
            El sintaxis <code>:=</code> es una abreviatura para declarar e inicializar una variable, por ejemplo,
            para <code>var f string = "apple"</code> en este caso.
            Esta sintaxis solo está disponible dentro de funciones.
          </p>

        </td>
        <td class="code">

          <pre class="chroma"><code><span class="line"><span class="cl">    <span class="nx">f</span> <span class="o">:=</span> <span class="s">&#34;apple&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
        </td>
      </tr>

    </table>

    <table>

      <tr>
        <td class="docs">

        </td>
        <td class="code">

          <pre class="chroma"><code><span class="line"><span class="cl"><span class="gp">$</span> go run variables.go
</span></span><span class="line"><span class="cl"><span class="go">initial
</span></span></span><span class="line"><span class="cl"><span class="go">1 2
</span></span></span><span class="line"><span class="cl"><span class="go">true
</span></span></span><span class="line"><span class="cl"><span class="go">0
</span></span></span><span class="line"><span class="cl"><span class="go">apple</span></span></span></code></pre>
        </td>
      </tr>

    </table>


    <p class="next">
      Siguiente ejemplo: <a href="constants">Constants</a>.
    </p>


    <p class="footer">
      by <a href="https://markmcgranaghan.com" target="_blank">Mark McGranaghan</a> and <a
        href="https://eli.thegreenplace.net" target="_blank">Eli
        Bendersky</a> | <a href="https://github.com/domini-code/gobyexample" target="_blank">source</a> | <a
        href="https://github.com/domini-code/gobyexample#license" target="_blank">licencia</a>
      | <a href="https://twitter.com/bezael_perez" target="_blank">traducido por Bezael</a>
    </p>

  </div>
  <script>
    var codeLines = [];
    codeLines.push(''); codeLines.push('package main\u000A'); codeLines.push('import \"fmt\"\u000A'); codeLines.push('func main() {\u000A'); codeLines.push('    var a \u003D \"initial\"\u000A    fmt.Println(a)\u000A'); codeLines.push('    var b, c int \u003D 1, 2\u000A    fmt.Println(b, c)\u000A'); codeLines.push('    var d \u003D true\u000A    fmt.Println(d)\u000A'); codeLines.push('    var e int\u000A    fmt.Println(e)\u000A'); codeLines.push('    f :\u003D \"apple\"\u000A    fmt.Println(f)\u000A}\u000A'); codeLines.push('');
  </script>
  <script src="site.js" async></script>
</body>

</html>