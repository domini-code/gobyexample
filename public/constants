<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>Go by Example: Constants</title>
  <link rel=stylesheet href="site.css">
</head>
<script>
  onkeydown = (e) => {

    if (e.key == "ArrowLeft") {
      window.location.href = 'variables';
    }


    if (e.key == "ArrowRight") {
      window.location.href = 'for';
    }

  }
</script>

<body>
  <div class="example" id="constants">
    <h2><a href="./">Go by Example</a>: Constants</h2>

    <table>

      <tr>
        <td class="docs">
          <p>Go admite <em>constantes</em> de carácteres, string, boolean,
            y valores numéricos.</p>
        </td>
        <td class="code empty leading">
        </td>
      </tr>

      <tr>
        <td class="docs">

        </td>
        <td class="code leading">
          <a href="https://go.dev/play/p/Vw-pXSfo9_b"><img title="Run code" src="play.png" class="run" /></a><img
            title="Copy code" src="clipboard.png" class="copy" />
          <pre
            class="chroma"><code><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">

        </td>
        <td class="code leading">

          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;math&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">
          <p><code>const</code> declara un valor constante.</p>
        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">s</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;constant&#34;</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">

        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">
          <p>Una declaración `<code>const</code>` puede aparecer en cualquier lugar donde una declaración
            `<code>var</code>` pueda hacerlo.</p>
        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl">    <span class="kd">const</span> <span class="nx">n</span> <span class="p">=</span> <span class="mi">500000000</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">
          <p>Las expresiones constantes realizan aritmética con precisión arbitraria.</p>
        </td>

        <td class="code leading">
          <pre
            class="chroma"><code><span class="line"><span class="cl">    <span class="kd">const</span> <span class="nx">d</span> <span class="p">=</span> <span class="mf">3e20</span> <span class="o">/</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">
          <p>Una constante numérica no tiene tipo hasta que se le asigna uno, como por una conversión explícita.</p>
        </td>
        <td class="code leading">

          <pre
            class="chroma"><code><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span></span></span></code></pre>
        </td>
      </tr>

      <tr>
        <td class="docs">
          <p>
            Un número puede recibir un tipo al usarlo en un contexto que requiera uno, como en una asignación de
            variable o una
            llamada a función. Por ejemplo, aquí <code>math.Sin</code> espera un <code>float64</code>.
          </p>
        </td>
        <td class="code">

          <pre class="chroma"><code><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nf">Sin</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
        </td>
      </tr>

    </table>

    <table>

      <tr>
        <td class="docs">
          <p><strong>Aritmética con Precisión Arbitraria:</strong></p>
          <p>Significa que cuando realizas operaciones matemáticas con estas constantes (como suma, resta,
            multiplicación, división), el lenguaje de programación no limita la precisión de los resultados a un cierto
            número de dígitos.</p>
          <p> En cambio, puede manejar números extremadamente grandes o cálculos con una gran cantidad de decimales con
            exactitud, mucho más allá de lo que permiten los tipos de datos numéricos estándar como int o float</p>
        </td>
        <td class="code">

          <pre
            class="chroma"><code><span class="line"><span class="cl"><span class="gp">$</span> go run constant.go 
</span></span><span class="line"><span class="cl"><span class="go">constant
</span></span></span><span class="line"><span class="cl"><span class="go">6e+11
</span></span></span><span class="line"><span class="cl"><span class="go">600000000000
</span></span></span><span class="line"><span class="cl"><span class="go">-0.28470407323754404</span></span></span></code></pre>
        </td>
      </tr>

    </table>


    <p class="next">
      Siguiente ejemplo: <a href="for">For</a>.
    </p>


    <p class="footer">
      by <a href="https://markmcgranaghan.com" target="_blank">Mark McGranaghan</a> and <a
        href="https://eli.thegreenplace.net" target="_blank">Eli
        Bendersky</a> | <a href="https://github.com/domini-code/gobyexample" target="_blank">source</a> | <a
        href="https://github.com/domini-code/gobyexample#license" target="_blank">licencia</a>
      | <a href="https://twitter.com/bezael_perez" target="_blank">traducido por Bezael</a>
    </p>

  </div>
  <script>
    var codeLines = [];
    codeLines.push(''); codeLines.push('package main\u000A'); codeLines.push('import (\u000A    \"fmt\"\u000A    \"math\"\u000A)\u000A'); codeLines.push('const s string \u003D \"constant\"\u000A'); codeLines.push('func main() {\u000A    fmt.Println(s)\u000A'); codeLines.push('    const n \u003D 500000000\u000A'); codeLines.push('    const d \u003D 3e20 / n\u000A    fmt.Println(d)\u000A'); codeLines.push('    fmt.Println(int64(d))\u000A'); codeLines.push('    fmt.Println(math.Sin(n))\u000A}\u000A'); codeLines.push('');
  </script>
  <script src="site.js" async></script>
</body>

</html>